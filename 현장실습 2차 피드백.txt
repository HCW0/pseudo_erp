현장실습 2차 피드백


1. 분석설계 ~ 실무 전산 인력관리 => 아키텍터라고도 부름

	SI ~ 아키텍터 > 분석설계 > 개발자

2. 모듈 다이어그램이 나에게 가장 맞는 다이어그램인듯


	1. 순차적으로 이해하기 쉬우며

	2. 시스템 아키텍쳐에 녹여넣기가 쉬우며

	3. 그리기가 매우 간단함


		피쉬본 방식 + 시퀀스 다이어그램

	
	4. 보완할점

		1. 단순히 flag등의 데이터로 기능을 표현하지 말고

		모호하거나 단어 하나로 끝나는 모든 모듈의 기능 node에는

		반드시 주석을 달아서 최소 기능을 표현할 것


		2. 다이어그램이라는 것은 데이터의 흐름이다.

		데이터의 입력

		데이터의 처리

		데이터의 출력인데


		모듈 다이어그램에서는 입력이 곧 사용자의 이벤트 인스턴스가 되고

		그 과정은 다음에 부를 from-to 모듈의 기능이고

		출력을 표현하기가 어렵다는 단점이 생긴다.


		이를 보완하려면 각 모듈의 기능 부분에 Provide service 노드를 추가하고

		해당 노드에 어떤 data input이 들어가서 어떤게 나왔는지 정리해야한다.




	3. 추가해야할 점


		1. 어떤 것을 추가하냐면 우선 플래그 시스템에 대해서

		중간 관리자가 출장등으로 부재중일 때를 대비한 로직을 추가해서

		플래그 뿐만이 아니라, 부재정보 역시 체크할 수 있게 만들어야할 것이다.



	4. 버전관리



		예를 들어, 충분히 업무 보고가 완성도 있게 만들어져서 더이상

		수정할 여지가 없는 경우, 특정한 플래그를 두어서 더 이상 수정

		못하게 막고 그 떄의 최종 결제자를 선정할 필요가 있다.



		보통은 사장이 최종 결제자가 되어야하지만, 사장이 임의로

		어떤 업무의 최종승인자를 선정하여 자신은 보고만 받도록 할 수도 있다.



	5. 업무 공정표


		최상위 결제자의 입장에서

		어떤 부서나 어떤 업무가 얼마나 진척되고 있는지 차트 등으로 확인이

		가능하도록 만든 것이 공정표이다.



		각 업무를 클릭하면 해당 업무를 구성하는 하위 업무와 그 담당 부서가 뜨고

		하위 업무는 또 최소의 태스크로 나뉜다.



		각 태스크에는 진행률이 있어 별다른 가중치를 가진다. 가중치를 가지고

		선형결합을 해서 전체 업무의 진척도를 나타내고

		이를 분석하면 느리게 일하는 사람, 성과가 좋은 사람을 한눈에 파악할 수 있다.

	
		여기에 세부사항을 표시하거나 평가를 달 수 있게 만들자.



		각 업무의 서브셋 관계는 업무레벨로 관리한다.

		서브셋에 포함될 태스크를 정의하는 것은 마스터 셋으로 하거나 별도의

		테이블을 만들어 관리하는 것이 좋아보인다.




	6. 업무레벨이라는 것은 단순히 대외비 등으로 적혀있어서 접근레벨과 연관이 깊지만

	실제로는 하위 업무와의 관계에 더 깊으니까

	기존 레벨의 정보는 접근 레벨로 병합시키고

	레벨은 일일 주간 월간 전체 공정 또는 상위 업무 하위 업무 더 하위 업무 등으로

	계층 구조화 시킨다!