:: 1 ::


**  SID같은 유니크 번호에 트리 구조로 의미를 부여하는 것은 의미가 없다.

cpu가 하도 빨라서, 그런 로직을 추가해서 체계적으로 관리하나


유니크 값 SID와 다른 필드 값을 조합한 슈퍼키로 1000만 개 정도의 entity를 검색하는 거나

비슷하거나 후자가 더 빠르다.


SID같은 유니크 값에는 단순히 고유하다. 라는 의미만을 부여할 것.


삼성 같은 경우도

SID에 계열사 등을 구분하도록 코드 구조를 나누었지만, 곧 시리얼로 갈아탔다고 한다.


예를 들어서 SID를 4조각으로 나눠서 트리구조를 만든다면 4번의 로직으로 의미를 조합해야하지만


SID가 고유하고 다른 필드값으로 슈퍼키를 만든다면 1번의 로직으로 원하는 데이터를 만들 수 ㅣㅇㅆ다.



고려해야할 것은 어떻게 업무 코드나 부서 코드를 가지고 유니크한 결과값을 도출해내는

슈퍼키를 만드는가? 이다.




:: 2 ::


테이블의 문자열에 ''붙이는 문제

	메시지의 경우에는 alert함수가 ''를 요구하기 때문에 편의상 문자열에 ''를 붙인다.

	그 외의 경우에는 안붙여도 된다.


	통일을 한다면 ''안붙이는쪽으로 통일하자.




:: 3 ::

핫스팟으로는 포트포워딩이 일반적으로 불가능하다

테더링 또는 핫스팟 단말기가 곧 NAT + 라우터가 되긴 하는데, 기본적으로 테더링/핫스팟은 out bound를 모두 허용하지만 in bound를 전부 막아놓는 방화벽 정책을 사용하도록 구현되기 때문이다.



:: 4 ::

RFP과정에서 안될거 같은 요구는 안된다고 바로 말하거나, 분석과정에서

안된다고 의사표현을 하고 대안을 찾아야함.





:: 5 ::

고객 입장에서는 빨리 움직이면 장땡인 경우가 많다.

즉 퍼포먼스가 좋지 않으면 아무리 설계를 잘해도 의미가 없을 수 있다는 말이다.

RFP가 왜 중요한지 알았다.

요구 명세서는 내 머리로는 이해할 수 없었지만, 실무자와 이야기하면서 업무의 흐름을

어느정도 파악하자, 요구 명세서를 이해하는데 필요한 기본 배경이 마련된 것이다.

아니면 나에게 너무나 생소한 일이라서 실무자 인터뷰라는 직접적인 수단이 잘 먹힌것일수도





:: 6 ::

시간이 충분하다면 당연히, RFD이후에 SPM등으로 네이밍 통합을 하고, 시스템 아키텍쳐를 작성하여

어떻게 구현할 것인지 방법론까지 고려해야하는게 정상이지만

시간이 정말로 정말로 없는 관계로 해당 프로젝트는 RFD에서 필요한 요구사항을 추출하고

해당 요구사항이라는 문제를 해결하기 위해 어떻게 접근할 것인가에 대해 고민하면서

구현을 진행하도록 한다.



외부소스가 절실히 필요하다.



:: 7 ::

아키텍쳐란?

RFP

요구사항이 나옴

요구사항을 분석해서 필드 or 테이블의 스키마를 설계함

DB를 구축하고 이것이 곧 data input이 됨

웹 서비스 로직을 구현함 이것이 곧 data process가 됨

서비스 인터페이스를 구현함 이것이 곧 data output임


아키텍쳐란 위의 과정을 총괄하는 프로젝트의 최상위 존재이며

객관적인 자료라고 하는 것은 명세서와 데이터 플로우 만으로 보는 사람이

이해할 수 있을 정도로 친절하고 간결하게 작성해야하는 것임.




:: 8 ::

데이터 분포라고 하는 것은 combo box 등으로 특정 entity를 찾기 위한 슈퍼키를 조합하는 과정이라고 생각하면 된다.

